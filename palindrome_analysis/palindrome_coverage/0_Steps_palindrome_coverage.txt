cd /nfs/brubeck.bx.psu.edu/scratch6/rahul/Bonobo_Y/analysis/palindrome/palindrome_coverage/multi_alignment_based_PARfix/
source activate /galaxy/home/biomonika/conda/GApy2.7



#Obatin the Y assembly multiple sequence alignment files
mkdir msa
cd msa
#Human specific generated using PrograssiveCactus and converted to MAF using hal2maf.
ln -s /nfs/brubeck.bx.psu.edu/scratch6/makova_lab/projects/active/Y_Chromosome/Great_Ape_Y_chromosomes/Y_Alignments/analysis/cactus_5way.20200506/alignment.hg_Y_centric.20200506.maf.gz .

#Chimpanzee specific generated using PrograssiveCactus and converted to MAF using hal2maf.
ln -s /nfs/brubeck.bx.psu.edu/scratch6/makova_lab/projects/active/Y_Chromosome/Great_Ape_Y_chromosomes/Y_Alignments/analysis/cactus_5way.20200506/alignment.panTro_Y_centric.20200506.maf.gz .


#Uncompress the files
gunzip < alignment.hg_Y_centric.20200506.maf.gz > alignment.hg_Y_centric.20200506.maf
gunzip < alignment.panTro_Y_centric.20200506.maf.gz > alignment.panTro_Y_centric.20200506.maf

###The hal2maf coversion does not create a header which is required for parsing MAF files.
###Add header if missing
##Paste the below lines


##maf version=1 scoring=none
# generated by cactus


##Run the script with palindrome names which are defined within the script. You will obtain an output file per each species.


#HUMAN COVERAGE 

#Downnload the scripts from github and update the paths  and coordinates
python palindrome_coverage_human.py P1 >P1_coverage_uniq.out
python palindrome_coverage_human.py P2 >P2_coverage_uniq.out
python palindrome_coverage_human.py P3 >P3_coverage_uniq.out
python palindrome_coverage_human.py P4 >P4_coverage_uniq.out
python palindrome_coverage_human.py P5 >P5_coverage_uniq.out
python palindrome_coverage_human.py P6 >P6_coverage_uniq.out
python palindrome_coverage_human.py P7 >P7_coverage_uniq.out
python palindrome_coverage_human.py P8 >P8_coverage_uniq.out

#Check for errors
cat P*.out


Output files includes a single column with header (species name). The values within the column are 0 or 1 and the size of the column is equal to the length of the palindrome arm defined within in the script. 

#################DEBUG palindrome_coverage_human


#Open the script and update the coordinates of palindromes here.
#Palindrome arm coordinates on hg38
Palindrome_coordinates={"P1":[('23359067', '24822577')],
"P2":[('23061889', '23208197')],
"P3":[('21924954', '22208730')],
"P4":[('18450291', '18640356')],
"P5":[('17455877', '17951255')],
"P6":[('16159590', '16269541')],
"P7":[('15874906', '15883575')],
"P8":[('13984498', '14019652')]
}

#Update the below lines if species names were set different in the cactus alignment input.
#List of species names in the MAF file
species_list=["panPan_Y", "panTro_Y", "gorGor_Y", "ponAbe_Y", "hg_Y"]

#Set path to the Y chromosome alignment file here.
#/nfs/brubeck.bx.psu.edu/scratch6/rahul/Bonobo_Y/analysis/palindrome/palindrome_coverage/multi_alignment_based
input_handle = open("msa/alignment.hg_Y_centric.20200506.maf", "rU") 
output_handle = open(inputP+"_sizeNonRepeatBlock.tab", "w")

##################


#CHIMPANZEE COVERAGE
python palindrome_coverage_chimpanzee.py C1 >C1_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C2 >C2_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C3 >C3_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C4 >C4_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C5 >C5_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C6 >C6_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C7 >C7_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C8 >C8_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C9 >C9_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C10 >C10_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C11 >C11_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C12 >C12_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C13 >C13_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C14 >C14_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C15 >C15_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C16 >C16_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C17 >C17_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C18 >C18_coverage_uniq.out
python palindrome_coverage_chimpanzee.py C19 >C19_coverage_uniq.out


cat C*.out

#####DEBUG is similar to human.


######OBTAIN LENGTH OF PALINDROME ARM WITHOUT REPEATS
mkdir non_repeat_length
cd non_repeat_length
mv ../readFA_countUPPERCASE.py .

##HUMAN
ln -s /nfs/brubeck.bx.psu.edu/scratch6/makova_lab/projects/active/Y_Chromosome/Great_Ape_Y_chromosomes/Human_Y/analysis/Assemblies/hg38.msY.smsk.fa


#P1: chrY:23359067-24822577
samtools faidx hg38.msY.smsk.fa chrY:23359067-24822577 > P1_half_palindrome.fa


#P2: chrY:23061889-23208197
samtools faidx hg38.msY.smsk.fa chrY:23061889-23208197 > P2_half_palindrome.fa

#P3: chrY:21924954-22208730
samtools faidx hg38.msY.smsk.fa chrY:21924954-22208730 > P3_half_palindrome.fa

#P4: chrY:18450291-18640356
samtools faidx hg38.msY.smsk.fa chrY:18450291-18640356 > P4_half_palindrome.fa

#P5: chrY:17455877-17951255
samtools faidx hg38.msY.smsk.fa chrY:17455877-17951255 > P5_half_palindrome.fa

#P6: chrY:16159590-16269541
samtools faidx hg38.msY.smsk.fa chrY:16159590-16269541 > P6_half_palindrome.fa

#P7: chrY:15874906-15883575
samtools faidx hg38.msY.smsk.fa chrY:15874906-15883575 > P7_half_palindrome.fa

#P8: chrY:13984498-14019652
samtools faidx hg38.msY.smsk.fa chrY:13984498-14019652 > P8_half_palindrome.fa


python readFA_countUPPERCASE.py P1_half_palindrome.fa
python readFA_countUPPERCASE.py P2_half_palindrome.fa
python readFA_countUPPERCASE.py P3_half_palindrome.fa
python readFA_countUPPERCASE.py P4_half_palindrome.fa
python readFA_countUPPERCASE.py P5_half_palindrome.fa
python readFA_countUPPERCASE.py P6_half_palindrome.fa
python readFA_countUPPERCASE.py P7_half_palindrome.fa
python readFA_countUPPERCASE.py P8_half_palindrome.fa

##CHIMPANZEE
ln -s /nfs/brubeck.bx.psu.edu/scratch6/makova_lab/projects/active/Y_Chromosome/Great_Ape_Y_chromosomes/Chimp_Y/analysis/Assemblies/panTro6.msY.smsk.fa

samtools faidx panTro6.msY.smsk.fa

#C1:	chrY:1759451-1906260
samtools faidx panTro6.msY.smsk.fa chrY:1759451-1906260 > C1_half_palindrome.fa
#C2:	chrY:2298081-2641450
samtools faidx panTro6.msY.smsk.fa chrY:2298081-2641450 > C2_half_palindrome.fa
#C3:	chrY:3587737-3756841
samtools faidx panTro6.msY.smsk.fa chrY:3587737-3756841 > C3_half_palindrome.fa
#"C4":[('4669973', '5057427')],
samtools faidx panTro6.msY.smsk.fa chrY:4669973-5057427 > C4_half_palindrome.fa
#C5:	chrY:8651546-8875661
samtools faidx panTro6.msY.smsk.fa chrY:8651546-8875661 > C5_half_palindrome.fa
#C6	chrY:9099776-9241820')],
samtools faidx panTro6.msY.smsk.fa chrY:9099776-9241820 > C6_half_palindrome.fa
#C7	chrY:9383864-9607979')],
samtools faidx panTro6.msY.smsk.fa chrY:9383864-9607979 > C7_half_palindrome.fa
#C8	chrY:9832094-9974138')],
samtools faidx panTro6.msY.smsk.fa chrY:9832094-9974138 > C8_half_palindrome.fa
#C9	chrY:10116182-10340297')],
samtools faidx panTro6.msY.smsk.fa chrY:10116182-10340297 > C9_half_palindrome.fa
#C10	chrY:10564412-10707830')],
samtools faidx panTro6.msY.smsk.fa chrY:10564412-10707830 > C10_half_palindrome.fa
#C11	chrY:11060051-11367156')],
samtools faidx panTro6.msY.smsk.fa chrY:11060051-11367156 > C11_half_palindrome.fa
#C12	chrY:12651797-12807463')],
samtools faidx panTro6.msY.smsk.fa chrY:12651797-12807463 > C12_half_palindrome.fa
#C13	chrY:13340000-13712330')],
samtools faidx panTro6.msY.smsk.fa chrY:13340000-13712330 > C13_half_palindrome.fa
#C14	chrY:14798116-14911216')],
samtools faidx panTro6.msY.smsk.fa chrY:14798116-14911216 > C14_half_palindrome.fa
#C15	chrY:15493746-15775281')],
samtools faidx panTro6.msY.smsk.fa chrY:15493746-15775281 > C15_half_palindrome.fa
#C16	chrY:16477310-16634522')],
samtools faidx panTro6.msY.smsk.fa chrY:16477310-16634522 > C16_half_palindrome.fa
#C17	chrY:21591500-21631400
samtools faidx panTro6.msY.smsk.fa chrY:21591500-21631400 > C17_half_palindrome.fa
#C18	chrY:23517939-23532379
samtools faidx panTro6.msY.smsk.fa chrY:23517939-23532379 > C18_half_palindrome.fa
#C19	chrY:23807052-24192224
samtools faidx panTro6.msY.smsk.fa chrY:23807052-24192224 > C19_half_palindrome.fa



python readFA_countUPPERCASE.py C1_half_palindrome.fa
python readFA_countUPPERCASE.py C2_half_palindrome.fa
python readFA_countUPPERCASE.py C3_half_palindrome.fa
python readFA_countUPPERCASE.py C4_half_palindrome.fa
python readFA_countUPPERCASE.py C5_half_palindrome.fa
python readFA_countUPPERCASE.py C6_half_palindrome.fa
python readFA_countUPPERCASE.py C7_half_palindrome.fa
python readFA_countUPPERCASE.py C8_half_palindrome.fa
python readFA_countUPPERCASE.py C9_half_palindrome.fa
python readFA_countUPPERCASE.py C10_half_palindrome.fa
python readFA_countUPPERCASE.py C11_half_palindrome.fa
python readFA_countUPPERCASE.py C12_half_palindrome.fa
python readFA_countUPPERCASE.py C13_half_palindrome.fa
python readFA_countUPPERCASE.py C14_half_palindrome.fa
python readFA_countUPPERCASE.py C15_half_palindrome.fa
python readFA_countUPPERCASE.py C16_half_palindrome.fa
python readFA_countUPPERCASE.py C17_half_palindrome.fa
python readFA_countUPPERCASE.py C18_half_palindrome.fa
python readFA_countUPPERCASE.py C19_half_palindrome.fa


#####PLOT THE COVERAGE

source activate /galaxy/home/rxv923/anaconda2/envs/renv/
R

require(zoo)


palindromeCovDir="/nfs/brubeck.bx.psu.edu/scratch6/rahul/Bonobo_Y/analysis/palindrome/palindrome_coverage/multi_alignment_based_PARfix/"

plot_figure_cross_palin_Human<-function(palindrome){

palin_Bon=read.table(paste(palindromeCovDir,palindrome,"_Bonobo_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Orn=read.table(paste(palindromeCovDir,palindrome,"_Orangutan_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Gor=read.table(paste(palindromeCovDir,palindrome,"_Gorilla_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Chi=read.table(paste(palindromeCovDir,palindrome,"_Chimpanzee_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)

return(c(sum(palin_Chi$Chimpanzee),sum(palin_Bon$Bonobo),sum(palin_Gor$Gorilla),sum(palin_Orn$Orangutan)))

#window=1000
###UNCOMMENT BELOW TO PRINT THE FIGURES
#tB<-zoo(palin_Bon$Bonobo)
#swBon=as.data.frame(rollapply(tB, width = window, by = 1, FUN = sum))
#tC<-zoo(palin_Chi$Chimpanzee)
#swChi=as.data.frame(rollapply(tC, width = window, by = 1, FUN = sum))
#tG<-zoo(palin_Gor$Gorilla)
#swGor=as.data.frame(rollapply(tG, width = window, by = 1, FUN = sum))
#tO<-zoo(palin_Orn$Orangutan)
#swOrn=as.data.frame(rollapply(tO, width = window, by = 1, FUN = sum))

#pdf(paste(palindrome,"_1kb_Figure.pdf",sep=""), width=5, height=6)
#par(mfrow=c(4,1))
####bottom, left, top, right
#par(mar=c(4,2,4,2))
#plot(x=rownames(swBon),y=swBon[,1],type='l',ylab='',xlab='Bonobo', main=palindrome,ylim=c(1,window),col='#ABD9E9')
#plot(x=rownames(swChi),y=swChi[,1],type='l',ylab='',xlab='Chimpanzee',ylim=c(1,window),col='#2C7BB6')
#plot(x=rownames(swGor),y=swGor[,1],type='l',ylab='',xlab='Gorilla',ylim=c(1,window),col='#FFFF5F')
#plot(x=rownames(swOrn),y=swOrn[,1],type='l',ylab='',xlab='Orangutan',ylim=c(1,window),col='#FDAE61')

#dev.off()

}

human_P_coverage<-rbind(
plot_figure_cross_palin_Human('P1'),
plot_figure_cross_palin_Human('P2'),
plot_figure_cross_palin_Human('P3'),
plot_figure_cross_palin_Human('P4'),
plot_figure_cross_palin_Human('P5'),
plot_figure_cross_palin_Human('P6'),
plot_figure_cross_palin_Human('P7'),
plot_figure_cross_palin_Human('P8')
)

colnames(human_P_coverage)=c("Chimpanzee","Bonobo","Gorilla","Orangutan")


plot_figure_cross_palin_Chimp<-function(palindrome){
palin_Bon=read.table(paste(palindromeCovDir,palindrome,"_Bonobo_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Orn=read.table(paste(palindromeCovDir,palindrome,"_Orangutan_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Gor=read.table(paste(palindromeCovDir,palindrome,"_Gorilla_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)
palin_Hum=read.table(paste(palindromeCovDir,palindrome,"_Human_alignment_vector.txt",sep=""), sep="\t", stringsAsFactors=F, header=T)

return(c(sum(palin_Hum$Human),sum(palin_Bon$Bonobo),sum(palin_Gor$Gorilla),sum(palin_Orn$Orangutan)))

}

chimp_C_coverage<-rbind(
plot_figure_cross_palin_Chimp('C1'),
plot_figure_cross_palin_Chimp('C2'),
plot_figure_cross_palin_Chimp('C3'),
plot_figure_cross_palin_Chimp('C4'),
plot_figure_cross_palin_Chimp('C5'),
plot_figure_cross_palin_Chimp('C6'),
plot_figure_cross_palin_Chimp('C7'),
plot_figure_cross_palin_Chimp('C8'),
plot_figure_cross_palin_Chimp('C9'),
plot_figure_cross_palin_Chimp('C10'),
plot_figure_cross_palin_Chimp('C11'),
plot_figure_cross_palin_Chimp('C12'),
plot_figure_cross_palin_Chimp('C13'),
plot_figure_cross_palin_Chimp('C14'),
plot_figure_cross_palin_Chimp('C15'),
plot_figure_cross_palin_Chimp('C16'),
plot_figure_cross_palin_Chimp('C17'),
plot_figure_cross_palin_Chimp('C18'),
plot_figure_cross_palin_Chimp('C19')
)

colnames(chimp_C_coverage)=c("Human","Bonobo","Gorilla","Orangutan")

#FROM the above matrix and output of readFA_countUPPERCASE.py create tables S5 and S6.
###COPY THE COVERAGE VALUES INTO A TAB FILE FOR HUMAN AND CHIMP. YOU WILL FIND THE NUMBERS IN SUPPLEMENTARY TABLE S5 and S6

library(ggplot2)
library(reshape2)
library(RColorBrewer)
library(gridExtra)

Colors.name <-  c(bo="#ABD9E9", ch="#2C7BB6" , hu="D7191C", go="#FFFFBF", or="#FDAE61")

hYp="/nfs/brubeck.bx.psu.edu/scratch6/rahul/Bonobo_Y/analysis/palindrome/palindrome_coverage/multi_alignment_based/coverage_output/humanY_palin_cov_PARupdate.tab"
cYp="/nfs/brubeck.bx.psu.edu/scratch6/rahul/Bonobo_Y/analysis/palindrome/palindrome_coverage/multi_alignment_based/coverage_output/chimpY_palin_cov_PARupdate.tab"

hYp_df = read.table(hYp, sep="\t", header=TRUE, stringsAsFactors=F,row.names=1)
rownames(hYp_df)[which(rownames(hYp_df)=='Overall')]='All'
colnames(hYp_df)[which(colnames(hYp_df)=='panTro_Y')]='Chimpanzee'
colnames(hYp_df)[which(colnames(hYp_df)=='panPan_Y')]='Bonobo'
colnames(hYp_df)[which(colnames(hYp_df)=='gorGor_Y')]='Gorilla'
colnames(hYp_df)[which(colnames(hYp_df)=='ponAbe_Y')]='Orangutan'

cYp_df = read.table(cYp, sep="\t", header=TRUE, stringsAsFactors=F,row.names=1)
rownames(cYp_df)[which(rownames(cYp_df)=='Overall')]='All'
colnames(cYp_df)[which(colnames(cYp_df)=='hg_Y')]='Human'
colnames(cYp_df)[which(colnames(cYp_df)=='panPan_Y')]='Bonobo'
colnames(cYp_df)[which(colnames(cYp_df)=='gorGor_Y')]='Gorilla'
colnames(cYp_df)[which(colnames(cYp_df)=='ponAbe_Y')]='Orangutan'

hYp_gp<-melt(as.matrix(hYp_df))
colnames(hYp_gp)<-c("Palindrome","Species","Coverage")

cYp_gp<-melt(as.matrix(cYp_df))
colnames(cYp_gp)<-c("Palindrome","Species","Coverage")


hYp_plot<-ggplot(hYp_gp) + 
  geom_tile(aes(Palindrome,Species,fill=Coverage))+
  scale_fill_gradientn(colours=colorRampPalette(c("#fee6ce","#fdae6b","#e6550d"), bias=1)(11), breaks = seq(0,100,10))+
  theme(axis.text.x=element_text(angle=0,vjust=.2, hjust=0.4))+
  labs( x="",y="",title="Human palindromes")+
  coord_fixed()+
  theme(axis.line = element_blank())+
  theme_minimal(base_size = 10)
 
cYp_plot<-ggplot(cYp_gp) + 
  geom_tile(aes(Palindrome,Species,fill=Coverage))+
  scale_fill_gradientn(colours=colorRampPalette(c("#fee6ce","#fdae6b","#e6550d"), bias=1)(11), breaks = seq(0,100,10))+
  theme(axis.text.x=element_text(angle=0,vjust=.2, hjust=0.4))+
  labs( x="",y="",title="Chimpanzee palindromes")+
  coord_fixed()+
  theme(axis.line = element_blank())+
  theme_minimal(base_size = 10) 
  

pdf("Fig_human_palindrome_coverage.pdf")
hYp_plot
dev.off()

pdf("Fig_chimp_palindrome_coverage.pdf")
cYp_plot
dev.off()